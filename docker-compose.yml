version: '3'

services:
    postgres:
      image: postgres:13
      container_name: postgresDB13
      restart: always
      ports:
        - "5432:5432"
      environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
      volumes:
        - postgres13_data:/var/lib/postgresql/data
        - postgres13_logs:/var/log/postgresql
      networks:
        - mynetwork
        
    jobmanager:
      image: pyflink:1.18.1
      container_name: jobmanager
      restart: always
      expose:
        - "6123"
      ports:
        - "8081:8081"
      command: jobmanager
      environment:
        - BOOTSTRAP_SERVERS=kafka:29092
        - RUNTIME_ENV=docker
        - |
          FLINK_PROPERTIES=
          jobmanager.rpc.address: jobmanager
          jobmanager.memory.process.size: 4096m
          taskmanager.memory.process.size: 8192m
          taskmanager.memory.task.heap.size: 2560m
          taskmanager.numberOfTaskSlots: 1
          state.backend: rocksdb
          state.backend.incremental: true
          state.checkpoints.dir: file:///tmp/src/checkpoints
          state.savepoints.dir: file:///tmp/src/savepoints
          state.backend.rocksdb.localdir: /tmp/src/rocksdb
          state.checkpoints.interval: 60000
          state.checkpoints.externalized-checkpoint-retention: 10
          state.checkpoints.externalized-checkpoint-cleanup: true
          heartbeat.interval: 1000
          heartbeat.timeout: 5000
          rest.flamegraph.enabled: true
          web.backpressure.refresh-interval: 5000
      volumes:
        - pyflink_job:/opt/flink
        - ./src:/tmp/src
      networks:
        - mynetwork
        
    taskmanager-0:
      image: pyflink:1.18.1
      container_name: taskmanager-0
      restart: always
      expose:
        - "6121"
        - "6122"
      depends_on:
        - jobmanager
      command: taskmanager
      links:
        - "jobmanager:jobmanager"
      environment:
        - BOOTSTRAP_SERVERS=kafka:29092
        - RUNTIME_ENV=docker
        - |
          FLINK_PROPERTIES=
          jobmanager.rpc.address: jobmanager
          jobmanager.memory.process.size: 4096m
          taskmanager.memory.process.size: 8192m
          taskmanager.memory.task.heap.size: 2560m
          taskmanager.numberOfTaskSlots: 1
          state.backend: rocksdb
          state.backend.incremental: true
          state.checkpoints.dir: file:///tmp/src/checkpoints
          state.savepoints.dir: file:///tmp/src/savepoints
          state.backend.rocksdb.localdir: /tmp/src/rocksdb
          state.checkpoints.interval: 60000
          state.checkpoints.externalized-checkpoint-retention: 10
          state.checkpoints.externalized-checkpoint-cleanup: true
          heartbeat.interval: 1000
          heartbeat.timeout: 5000
      volumes:
        - pyflink_task:/opt/flink
        - ./src:/tmp/src
      networks:
        - mynetwork

    zookeeper:
      image: bitnami/zookeeper:3.8.3
      container_name: zookeeper
      restart: always
      environment:
        ZOO_PORT_NUMBER: 2181
        ZOO_TICK_TIME: 2000
        ALLOW_ANONYMOUS_LOGIN: "yes"
      ports:
        - 2181:2181
      volumes:
        - zookeeper_data:/opt/bitnami
      networks:
        - mynetwork

    kafka:
      image: bitnami/kafka:3.6.1
      container_name: kafka
      restart: always
      links:
        - zookeeper
      ports:
        - 9092:9092
      environment:
        KAFKA_CFG_NODE_ID: 1
        KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
        KAFKA_CFG_LISTENERS: INTERNAL://:29092,EXTERNAL://:9092
        KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
        KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
        KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      volumes:
        - kafka_data:/opt/bitnami
      networks:
        - mynetwork

    debezium:
      image: debezium/connect:1.9
      container_name: debezium
      restart: always
      ports:
        - 8083:8083
      environment:
        CONFIG_STORAGE_TOPIC: my_connect_configs
        OFFSET_STORAGE_TOPIC: my_connect_offsets
        STATUS_STORAGE_TOPIC: my_connect_statuses
        BOOTSTRAP_SERVERS: kafka:29092
      depends_on:
        - kafka
        - zookeeper
        - postgres  
      volumes:
        - debezium_conf:/kafka/config
        - debezium_logs:/kafka/logs
        - debezium_connect:/kafka/connect
      networks:
        - mynetwork

    kafdrop:
      image: obsidiandynamics/kafdrop
      container_name: kafdrop
      restart: always
      environment:
        KAFKA_BROKERCONNECT: "kafka:29092"
      ports:
        - 9000:9000
      depends_on:
        - kafka
      networks:
        - mynetwork    

    debezium-ui:
      image: debezium/debezium-ui:2.4
      container_name: debezium_ui
      restart: always
      depends_on:
        - debezium
      ports:
        - "8080:8080"
      environment:
        - KAFKA_CONNECT_URIS=http://debezium:8083
      networks:
        - mynetwork
        
    pgadmin:
      image: elestio/pgadmin:REL-8_2
      depends_on: 
        - postgres
      container_name: pgadmin
      restart: always
      ports:
        - "8082:8080"
      environment:
        PGADMIN_DEFAULT_EMAIL: root@gmail.com
        PGADMIN_DEFAULT_PASSWORD: root
        PGADMIN_LISTEN_PORT: 8080
      networks:
        - mynetwork
            
networks:
  mynetwork:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: mynetwork
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.enable_icc: "true"

volumes:
  postgres13_data:
    driver: local

  postgres13_logs:
    driver: local
    
  pyflink_job:
    driver: local
  
  pyflink_task:
    driver: local

  pyflink_src:
    driver: local
    
  zookeeper_data:
    driver: local

  kafka_data:
    driver: local

  debezium_logs:
    driver: local

  debezium_conf:
    driver: local

  debezium_connect:
    driver: local
      
  pgadmin_servers:
    driver: local
